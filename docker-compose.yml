version: "3.7"

services:
  db:
    image: postgres:13
    container_name: pong_db_cnt
    expose:
      - "5432"
    networks:
      - pong_database_network
    restart: always
    stop_signal: SIGINT
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST=127.0.0.1
      - POSTGRES_PORT=5432
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - PG_DATA=/var/lib/postgresql/data

  pgadmin:
    depends_on:
      - db
    build: ./pgadmin
    container_name: pong_pgadmin_cnt
    restart: always
    volumes:
      - pgadmin:/var/lib/pgadmin
    expose:
      - "80"
    networks:
      - pong_database_network
    environment:
      - GUNICORN_ACCESS_LOGFILE=/dev/null
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD

  backend:
    depends_on:
      - db
    build: ./backend
    image: pong_back_img
    container_name: pong_back_cnt
    expose:
      - "8080"
    volumes:
      - ./backend/srcs:/app
      - /app/node_modules
      - /app/dist
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - JWT_SECRET
      - JWT_EXPIRATION_TIME
      - JWT_REFRESH_SECRET
      - JWT_REFRESH_EXPIRATION_TIME
      - MODE
      - RUN_MIGRATIONS
      - OAUTH_42_UID
      - OAUTH_42_SECRET
      - OAUTH_GOOGLE_UID
      - OAUTH_GOOGLE_SECRET
    restart: always
    networks:
      - pong_database_network
      - pong_backend_network

  frontend:
    depends_on:
      - backend
    build: ./frontend
    image: pong_front_img
    container_name: pong_front_cnt
    expose:
      - "3000"
    volumes:
      - ./frontend/srcs/:/app
      - /app/node_modules
    restart: always
    stop_grace_period: 1m
    networks:
      - pong_frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 40s

  reverse_proxy:
    depends_on:
      - pgadmin
      - frontend
      - backend
    build: ./reverse_proxy
    image: pong_reverse_proxy_img
    container_name: pong_reverse_proxy_cnt
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./reverse_proxy/certs/:/etc/nginx/certs/
    ports:
      - 80:80
      - 443:443
    networks:
      - pong_database_network
      - pong_frontend_network
      - pong_backend_network

networks:
  pong_database_network: {}
  pong_frontend_network: {}
  pong_backend_network: {}

volumes:
  pg_data:
  pgadmin:
